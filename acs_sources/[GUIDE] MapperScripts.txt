[Note: This is a continuation of "[Guide]SurvivorScripts" ^^]
 
This guide will be divided in two parts:
 
1.- Startup Scripts
2.- Mappers Scripts

 
			 			 	 ______________________
							|                      |
							|1.- Startup Scripts   |
							|______________________|


The "Startup Scripts" are scripts that can be called at the start of the level to set some things 
like the "Werewolf Transformation" or the level specific bonuses, like "Ten Cheerleaders", "NoBazookaFired", etc.
Not all this bonuses are already added but they will be added eventually.

You can add them in the scripts of each map, inside the "Start Level" script:
_______________________________________________________

Script "Start Level" ENTER
{
	...

	//You can add startup scripts here
	...
}

_______________________________________________________

You can add them by using "ACS_NamedExecuteAlways('name_of_the_script',0,[argument_1]...);".
It isnt necessary to always include an argument if the script doesnt expect it, but it is necessary
to include the '0' after the name of the script, so the called scripts works on the current map.
Example:

Script "Start Level" ENTER
{
	...

	//You can add startup scripts here
	ACS_NamedExecuteAlways("WerewolfCountdown",0,9);
	ACS_NamedExecuteAlways("TenCheerleader",0);
	ACS_NamedExecuteAlways("SurvivorLimit",0,12);
	etc...
}

_______________________________________________________


List of available Startup Scripts:
At the moment the categories of Startup Scripts are either "Level Control" or "Bonus Activation"

Level Control:
--------------
Are Scripts that control mechanics or limits of the actual level.


//	---------------------------------------------------------------------------------------------------------

Name: 		
		"SurvivorLimit"

Syntax:		
		ACS_NamedExecuteAlways("SurvivorLimit",0,LimitNumber);

Description:
		This script sets the maximum number of survivors that could be spawned 
        by SurvivorSpawners in this level and also the next ones.
		It will only accept a number between '0' and '20', being '0' the default '10' of the original ZAMN.
		Keep in mind that if you set a number higher than the quantity of SurvivorSpawners in the level, you probably
		wouldn't be able to exit the level because of not having enough survivors to rescue.

Example:
		ACS_NamedExecuteAlways("SurvivorLimit",0,15);

		This will set the survivor limit for this level and the next ones as '15', if you don't want to have all your
		next levels with the same limit you can set again the survivor limit in the next map.
		
		Everytime that the survivor limit is changed it's going to calculate as well the equivalent number of
		dead survivors in relation to the new limit, so keep in mind that if you set a higher number and then change
		to a lower number, the number of dead survivors will go higher and lower too.

//	---------------------------------------------------------------------------------------------------------

Name: 		
		"WerewolfCountdown"

Syntax:		
		ACS_NamedExecuteAlways("WerewolfCountdown",0,Seconds);

Description:
		This script starts a countdown for the werewolf transformation.
		You can specify the timer until the countdown finishes, the time is taken as Seconds.

Example:
		ACS_NamedExecuteAlways("WerewolfCountdown",0,9);

		When the level starts, after the TitleCards, it will start the countdown, and once is finished it will
		change a variable to let the Tourist Survivors know that the time has come.

//	---------------------------------------------------------------------------------------------------------//

Name: 		
		"GeneralCountdown"

Syntax:		
		ACS_NamedExecuteAlways("GeneralCountdown",0,Seconds,Script,Icon);

Description:
		This script starts a countdown for general purpose.
		Once it's finished it will run a numbered script, which  will be up to the mapper to define what it does.

		You can specify the time until the countdown finishes, the time is taken as Seconds.
		You can specify a icon for the counter as well, it will take a number in this argument which represents:
			0: No Icon
			1: Cheerleader Icon
			2: Baby Icon
			3: Dog Icon
			4: Werewolf Icon
			5: [Undefined]
			6: [Undefined]
			7: [Undefined]
			8: [Undefined]
			9: [Undefined]
			10: [Undefined]
			11: [Undefined]
			12: [Undefined]
			13: [Undefined]
			14: [Undefined]
			15: [Undefined]
			16: [Undefined]
			17: [Undefined]
			18: [Undefined]
			19: [Undefined]
			20: [Undefined]
		

Example:
		ACS_NamedExecuteAlways("GeneralCountdown",0,15,127,2);

		When the level starts, after the TitleCards, it will start the countdown, 
		and if the timer gets to '0' it will execute the Script 127.
		The timer has an icon number 2 , which it is the survivor baby icon.

//	---------------------------------------------------------------------------------------------------------//

Name: 		
		"StopCountdown"

Syntax:		
		ACS_NamedExecuteAlways("StopCountdown");

Description:
		This script will stop the "GeneralCountdown" script, set by the mapper if the requisites to stop the timer where met.

Example:
		ACS_NamedExecuteAlways("StopCountdown",0);

		Self-explainatory

//	---------------------------------------------------------------------------------------------------------

Name: 		
		"SetGoalCount"

Syntax:		
		ACS_NamedExecuteAlways("SetGoalCount",0,Target,Script,Icon);

Description:
		Similar to "GeneralCountdown" this script will set a counter wich can be added/subtracted to 
		by the scripts "AddOneToGoal"/"TakeOneToGoal" respectively.

		It is up to the mapper to define what script will execute once it reaches it's goal.
		It can be combined as well with the "StopCountdown" script, to stop a timer if the requisites for the goal where met.

		You can specify a icon for the counter as well, it will take a number in this argument which represents:
			0: No Icon
			1: Cheerleader Icon
			2: Baby Icon
			3: Dog Icon
			4: Werewolf Icon
			5: [Undefined]
			6: [Undefined]
			7: [Undefined]
			8: [Undefined]
			9: [Undefined]
			10: [Undefined]
			11: [Undefined]
			12: [Undefined]
			13: [Undefined]
			14: [Undefined]
			15: [Undefined]
			16: [Undefined]
			17: [Undefined]
			18: [Undefined]
			19: [Undefined]
			20: [Undefined]
		

Example:
		ACS_NamedExecuteAlways("SetGoalCount",0,3,441,1);

		When the level starts, after the TitleCards, it will start the goal count of 3, 
		and if the goal is reached it will execute the Script 441.
		The counter has an icon number 1 , which it is the survivor cheerleader icon.

//	---------------------------------------------------------------------------------------------------------//

Name: 		
		"AddOneToGoal"	/	"TakeOneToGoal"

Syntax:		
		ACS_NamedExecuteAlways("AddOneToGoal");
		or
		ACS_NamedExecuteAlways("TakeOneToGoal");

Description:
		This script will add/subtract respectively, to the goal set by the "SetGoalCount" script.

Example:
		ACS_NamedExecuteAlways("AddOneToGoal",0);
		or
		ACS_NamedExecuteAlways("TakeOneToGoal",0);

//	---------------------------------------------------------------------------------------------------------

Name: 		
		"StopGoalCount"

Syntax:		
		ACS_NamedExecuteAlways("StopGoalCount");

Description:
		Similar to the "StopCountdown" script, this script can be called to stop the Goal count.
		It can be combined with "GeneralCountdown" to stop the goal count if the timer reaches '0'.

Example:
		ACS_NamedExecuteAlways("StopGoalCount",0);

//	---------------------------------------------------------------------------------------------------------
Name: 		
		"IgnoreSurvivorGameOver"

Syntax:		
		ACS_NamedExecuteAlways("IgnoreSurvivorGameOver");

Description:
		This script will deactivate for this level the GameOver triggering if all survivors Died, allowing to make more experimental
		type of maps without the issue of having the mechanics interrumped by this.

Example:
		ACS_NamedExecuteAlways("IgnoreSurvivorGameOver");

		Self-explainatory

//	---------------------------------------------------------------------------------------------------------

Name: 		
		"CustomTitleCards"

Syntax:		//[Check Level 10 "No Assembly Required" map scripts for a clearer example of this function in use ^^]
__________________________________________________________________________
		(...)
	
		global str 11: CustomCard1;
		global str 12: CustomCard2;
		global str 13: CustomCard3;
		global str 14: CustomCard4;
		global str 15: CustomCard5;
		global str 16: CustomCard6;
		global str 17: CustomCard7;
		global str 18: CustomCard8;
		global str 19: CustomCard9;
		global str 20: CustomCard10;

		(...)
__________________________________________________________________________

		////You can add startup scripts here
		ACS_NamedExecuteAlways("CustomTitleCards",0,NumberOfTitleCards);

		CustomCard1 = "YourCardName1";
		CustomCard2 = "YourCardName2";
		CustomCard3 = "YourCardName3";
		CustomCard4 = "YourCardName4";
		CustomCard5 = "YourCardName5";
		CustomCard6 = "YourCardName6";
		CustomCard7 = "YourCardName7";
		CustomCard8 = "YourCardName8";
		CustomCard9 = "YourCardName9";
		CustomCard10= "YourCardName10";
__________________________________________________________________________


Description:
		This script allows you to set the number of "Title Cards" to use in the introduction to the level, by setting the amount 
		of "Title Cards" to use [as the first argument], and the name of each texture to use as a "Title Card" [defined independently].
		This script is a little more complex than the rest, because you need to define first the global variable strings to use:
		
		/* First in the beggining on the map scripts ... */
		
		global str 1:FirstCard;
		global str 2:SecndCard;
		
		(...)

		/* You have to add this lines below: */
		
		global str 11: CustomCard1;
		global str 12: CustomCard2;
		global str 13: CustomCard3;
		global str 14: CustomCard4;
		global str 15: CustomCard5;
		global str 16: CustomCard6;
		global str 17: CustomCard7;
		global str 18: CustomCard8;
		global str 19: CustomCard9;
		global str 20: CustomCard10;

		/* Then you can call this script with the number of TitleCards to use: */

		//You can add startup scripts here
		ACS_NamedExecuteAlways("CustomTitleCards",0,NumberOfTitleCards);
		


		/* And finally you can define below the textures to use as the TitleCards. */

		CustomCard1 = "YourCardName1";
		CustomCard2 = "YourCardName2";
		CustomCard3 = "YourCardName3";
		CustomCard4 = "YourCardName4";
		CustomCard5 = "YourCardName5";
		CustomCard6 = "YourCardName6";
		CustomCard7 = "YourCardName7";
		CustomCard8 = "YourCardName8";
		CustomCard9 = "YourCardName9";
		CustomCard10= "YourCardName10";

		- This will play the animation between the TitleCards and make the fade after the last card.
		- Keep in mind that the "TitleCard" textures in ZAMNTC are actually strips images in a png format, 
		  which the Script lowers, moves, and replace to make the animations work.
		- If you want to understand more about this "TitleCard strips", you can check as well
		  "[GUIDE] TitleCards" with a more in depth explanation about them, 
		  as long as checking the textures by themselves of the Examples, and the map
		  "No Assembly Required" will include the TitleCard test commented as well.
 
		
/*------------------------*/
 Example 1: (With 4 Cards)
/*------------------------*/

__________________________________________________________________________
		(At the beggining of the Script Library)

		
		global str 11: CustomCard1;
		global str 12: CustomCard2;
		global str 13: CustomCard3;
		global str 14: CustomCard4;

__________________________________________________________________________
		(At the Startup Scripts section)

		//You can add startup scripts here
		ACS_NamedExecuteAlways("CustomTitleCards",0,4);

		CustomCard1 = "CCARD1";
		CustomCard2 = "CCARD2";
		CustomCard3 = "CCARD3";
		CustomCard4 = "CCARD4";
__________________________________________________________________________

[This will load a map with 4 TitleCards, and those TitleCards have the textures:]
["CCARD1", "CCARD2", "CCARD3", "CCARD4". In that same order.]
[It will then fade away in the last card.]


/*------------------------*/
 Example 2: (With 10 Cards)
/*------------------------*/

__________________________________________________________________________
		(At the beggining of the Script Library)

		
		global str 11: CustomCard1;
		global str 12: CustomCard2;
		global str 13: CustomCard3;
		global str 14: CustomCard4;
		global str 15: CustomCard5;
		global str 16: CustomCard6;
		global str 17: CustomCard7;
		global str 18: CustomCard8;
		global str 19: CustomCard9;
		global str 20: CustomCard10;

__________________________________________________________________________
		(At the Startup Scripts section)

		//You can add startup scripts here
		ACS_NamedExecuteAlways("CustomTitleCards",0,10);

		CustomCard1 = "CCARD1";
		CustomCard2 = "CCARD2";
		CustomCard3 = "CCARD3";
		CustomCard4 = "CCARD4";
		CustomCard5 = "CCARD5";
		CustomCard6 = "CCARD6";
		CustomCard7 = "CCARD7";
		CustomCard8 = "CCARD8";
		CustomCard9 = "CCARD9";
		CustomCard10= "CCARD10";
__________________________________________________________________________

[This will load a map with 10 TitleCards, and those TitleCards have the textures:]
["CCARD1", "CCARD2", "CCARD3", "CCARD4", "CCARD5", "CCARD6", "CCARD7", "CCARD8", "CCARD9", "CCARD10". In that same order.]
[It will then fade away in the last card.]


/*------------------------*/
 Example 3: (With 5 Cards)
/*------------------------*/

__________________________________________________________________________
		(At the beggining of the Script Library)

		
		global str 11: CustomCard1;
		global str 12: CustomCard2;
		global str 13: CustomCard3;
		global str 14: CustomCard4;
		global str 15: CustomCard5;

__________________________________________________________________________
		(At the Startup Scripts section)

		//You can add startup scripts here
		ACS_NamedExecuteAlways("CustomTitleCards",0,5);

		CustomCard1 = "IT";
		CustomCard2 = "WILL";
		CustomCard3 = "LOAD";
		CustomCard4 = "IN";
		CustomCard5 = "ORDER";
__________________________________________________________________________

[This will load a map with 5 TitleCards, and those TitleCards have the textures:]
["IT", "WILL", "LOAD", "IN", "ORDER". In that same order.]
[It will then fade away in the last card.]


//	---------------------------------------------------------------------------------------------------------

Name: 		
		"SetCardTime"

Syntax:		
		ACS_NamedExecuteAlways("SetCardTime",0,CardIndex,Tics);

Description:
		This script will set a specific time for the card being static on the screen.
		The CardIndex is the index of the Card, from '0' to '9'.
		The Tics are the time that the Card will remain static, 1 tic is equivalent to 1/35 of a second.
		
		NOTE: 	If a card doesn't have a time set but it was loaded trough the "CustomTitleCards" script
				it will default to 60 tics.
				If the time set is '0' it will also default to 60 tics.

/*------------------------*/
 Example 1:
/*------------------------*/
__________________________________________________________________________
	
		ACS_NamedExecuteAlways("SetCardTime",0,0,35);
		ACS_NamedExecuteAlways("SetCardTime",0,1,35);
		ACS_NamedExecuteAlways("SetCardTime",0,2,35);
		ACS_NamedExecuteAlways("SetCardTime",0,3,35);
__________________________________________________________________________
[This will set the first 4 custom cards to 1 second each.]


/*------------------------*/
 Example 2:
/*------------------------*/
__________________________________________________________________________
		
		int TimesForCards [10] = {35,35,35,60,60,15,25,45,60,35};
		
		for(int i=0; i<10; i++)
		{
			ACS_NamedExecuteAlways("SetCardTime",0,i,TimesForCards[i]);
		}	
__________________________________________________________________________
[This will make an array called "TimesForCards" with the time for each custom card]
[and then with a "for" loop will set each time in order    ]
[using the values of the array.]


//	---------------------------------------------------------------------------------------------------------

Name: 		
		"NoTitleCards"

Syntax:		
		ACS_NamedExecuteAlways("NoTitleCards");

Description:
		This script will skip the TitleCards animation at the start of this level, it will ignore as well if the menu option "Skip TitleCards"
		is enabled or not.
		This takes priority over the "TitleCards" and "CustomTitleCards", so even if both are set, this script will just ignore that.

Example:
		ACS_NamedExecuteAlways("NoTitleCards");

		Self-explainatory

//	---------------------------------------------------------------------------------------------------------

Name: 		
		"SetGame_Ghoul"

Syntax:		
		ACS_NamedExecuteAlways("SetGame_Ghoul");

Description:
		This script will set the calling player onto the "Ghoul Patrol" player setting.
		Allowing them to Run and Slide as well than modifying their jump height and movement speed.
		Also activating the "Ghoul Patrol" HUD and as a general GP indicator.

Example:
		ACS_NamedExecuteAlways("SetGame_Ghoul",0);

		Self-explainatory

//	---------------------------------------------------------------------------------------------------------











Bonus Activation:
-----------------
These scripts will activate level specific bonuses, like the "Ten Cheerleaders", "NoBazookaFired", etc.

//	---------------------------------------------------------------------------------------------------------

Name: 		
		"TenCheerleaders"

Syntax:		
		ACS_NamedExecuteAlways("TenCheerleaders",0);
		or
		ACS_NamedExecuteAlways("TenCheerleaders",0,CheerleaderNumber);

Description:
		This script will activate a Bonus Level if you collect 10 Cheerleaders, or the Number of Cheerleaders specified on the script.

Example1:
		ACS_NamedExecuteAlways("TenCheerleaders",0);

		This should behave as the Bonus in the "Martians Need Cheerleaders" map.

Example2:
		ACS_NamedExecuteAlways("TenCheerleaders",0,6);

		This bonus will activate if you save 6 cheerleaders in the level.
		If you specify a number but set it to 0 regardless it's going to default to 10 Cheerleaders.

//	---------------------------------------------------------------------------------------------------------

Name: 		
		"NoLycantrophyBonus"

Syntax:		
		ACS_NamedExecuteAlways("NoLycantrophyBonus",0,TouristsNumber);

Description:
		This script will give bonus points at the end if all tourists
		in the level where saved before turning into Werewolfs.

Example:
		ACS_NamedExecuteAlways("NoLycantrophyBonus",0,3);

		It will mantain a counter at 3 tourists survivors to save in this level, and if one of 
		those tourists survivors transform into a Werewolf that counter will lower.
		At the end of the level it will trigger the bonus only if the counter is the same 
		as the quantity of tourists survivors to save.

//	---------------------------------------------------------------------------------------------------------

Name: 		
		"NoBazookaFireBonus"

Syntax:		
		ACS_NamedExecuteAlways("NoBazookaFireBonus",0);

Description:
		This script will give bonus points if both players didn't fire the bazooka on the level.

Example:
		ACS_NamedExecuteAlways("NoLycantrophyBonus",0);

		Self explainatory.

//	---------------------------------------------------------------------------------------------------------

There are no more Bonus Activation scripts included at the moment.
The Bonus Scripts doesn't give points at the moment but they will do in the future.



//	---------------------------------------------------------------------------------------------------------//





							 ______________________
							|                      |
							|2.- Mapper Scripts    |
							|______________________|


In a similar fashion than the startup scripts you can also call some scripts 
from the "SurvivorScripts" that you can write in the map.
This scripts should help adding more customizable levels mechanics. 

//	---------------------------------------------------------------------------------------------------------

Name: 		
		"ChangeMusic"

Syntax:		
		ACS_NamedExecuteAlways("ChangeMusic",0,TrackNumber);

Description:
		This script changes the music of the level in a way that is friendly with the "DynamicMusic" script.
		The "TrackNumber" is a number which will indicate the number of the track to play, and the number '0'
		should stay zero, as it references to the actual map in which the player is playing.

Example:
		ACS_NamedExecuteAlways("ChangeMusic",0,8);

		This will set the music to the "Titanic Toddler" track. And it will continue playing this track until
		the level is finished or there's another change in the music.
		For more information about the Number of the Tracks you can refer to the "[Guide]Music Tracklist".
		
		You can also launch this script trough the console using the pukename command, and theres a "MusicInfo"
		script as well which will write the Tracklist in the console:
		
		pukename MusicInfo						[Enter to execute]
		pukename ChangeMusic 'TrackNumber'		[Enter to execute]

//	---------------------------------------------------------------------------------------------------------
	
Name: 		
		"AreTitleCardsDone"

Syntax:		
		ACS_NamedExecuteWithResult("AreTitleCardsDone",0);

Description:
		This script will check when called, if the TitleCards animation already is finished.
		It will give a number between a 0 and 1 and that will indicate if it was finished.
			0: Not Finished.
			1: Finished.

Example:
		{
		...
			while(ACS_NamedExecuteWithResult("AreTitleCardsDone") == 0)
			{Delay(1);}

			print(s: "Yay! The level started");
		...
		}

		This script will be waiting on a constant loop checking if the TitleCards are done 
		to continue with the rest of the script.
		It checks if the result is '0' and if it is, then it will wait 1 tic (1/35 second) before checking again
		until the result returns '1'.

//	---------------------------------------------------------------------------------------------------------//
	
Name: 		
		"IsLevelFinished"

Syntax:		
		ACS_NamedExecuteWithResult("IsLevelFinished");

Description:
		This script will check when called, if the level already is finished.
		It will give a number between a 0 and 1 and that will indicate if it was finished.
			0: Not Finished.
			1: Finished.

Example:
		{
		...
			while(ACS_NamedExecuteWithResult("IsLevelFinished") == 0)
			{
				GiveInventory("ScorePoints",10);
				Delay(1);
			}

			Terminate;
		...
		}

		This script will give points on a constant loop to the player while they are still on the level.
		It checks if the result is '0' and if it is, then it will wait 1 tic (1/35 second) before checking again
		until the result returns '1'.
		And then it will terminate this same script.

//	---------------------------------------------------------------------------------------------------------//
/*	//NOT IMPLEMENTED YET BUT PLANNED
Name: 		
		"AddSurvivorCounter"

Syntax:		
		ACS_NamedExecuteAlways("AddSurvivorCounter",0,Number,Allow20Plus);

Description:
		It will raise the number of survivors to spawn in the next levels (in relation to the SurvivorMaximum)
		as long as it doesn't excede the SurvivorMaximum already set for the level.
		If the number to add to the counter adds to a higher number than the maximum, the counter would only
		raise to the maximum of the level.

		The 'Allow20Plus' if set to 1, will let you add any number without checking if it goes over the limit,
		this could potentially break the level, as the showcase will only show up to 2o survivors.
		Default is 0.

Example1:
		ACS_NamedExecuteAlways("AddSurvivorCounter",0,3);	//The SurvivorMaximum is 10

		This should add 3 survivors to the SurvivorsToSpawn Counter, this will become relevant in the next stages.

Example2:
		ACS_NamedExecuteAlways("AddSurvivorCounter",0,4);	//The SurvivorMaximum is 5

		This should add 2 survivors to the SurvivorsToSpawn Counter, this will become relevant in the next stages.
*/
//	---------------------------------------------------------------------------------------------------------//
/*	//NOT IMPLEMENTED YET BUT PLANNED
Name: 		
		"TakeSurvivorCounter"

Syntax:		
		ACS_NamedExecuteAlways("TakeSurvivorCounter",0,Number,Allow0);

Description:
		It will lower the number of survivors to spawn in the next levels (in relation to the SurvivorMaximum)
		as long as it doesn't gets to a lower number than 1, if it does the counter would only lower to 1.
		If the number to add to the counter adds to a higher number than the maximum, the counter would only
		raise to the maximum of the level.

		The 'Allow0' if set to 1, will let you take any number without checking if it goes to 0, if it does
		this will trigger a GameOver in the next levels, so using "IgnoreSurvivorGameOver" should be neccesary.
		Default is 0.

Example1:
		ACS_NamedExecuteAlways("AddSurvivorCounter",0,3);	//The SurvivorMaximum is 10

		This should take 3 survivors to the SurvivorsToSpawn Counter, this will become relevant in the next stages.

Example2:
		ACS_NamedExecuteAlways("AddSurvivorCounter",0,4);	//The SurvivorMaximum is 5

		This should take 2 survivors to the SurvivorsToSpawn Counter, this will become relevant in the next stages.
*/
//	---------------------------------------------------------------------------------------------------------//
/*	//NOT IMPLEMENTED YET BUT PLANNED
Name: 		
		"SetSurvivorCounter"

Syntax:		
		ACS_NamedExecuteAlways("SetSurvivorCounter",0,Number);

Description:
		It will set the SurvivorCounter, overriding saves and deaths, it will 
		only allow a number between 0 and 20.
		Use with caution as this can be unfair to the players, but it could be used in experimental maps if needed.

Example:
		ACS_NamedExecuteAlways("SetSurvivorCounter",0,8);

		This will set the SurvivorsToSpawn Counter to 8, regardless of the limit.
*/
//	---------------------------------------------------------------------------------------------------------//

There's no more Mapper Scripts available at the moment.
But keep an eye in future demos ^^




